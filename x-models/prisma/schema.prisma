// This is the complete and definitive schema for the x-models project.
// Version 2.0 - Relational Structure

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//#####################################################
// ENUMS & CUSTOM TYPES
//#####################################################

enum MediaType {
  IMAGE
  VIDEO
}

//#####################################################
//  APPLICATION MODELS
//#####################################################

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?   // The user's avatar, e.g., from Google login
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  model Model? // A user can have one model profile

  // For NextAuth.js
  accounts Account[]
  sessions Session[]
}

// RENAMED from Profile to Model for clarity
model Model {
  id          String    @id @default(cuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Public-facing info
  publicName  String    @unique // The unique URL slug, e.g., "elara-vance"
  handle      String?   // e.g., "@elaravance"
  bio         String?   @db.Text
  location    String?
  agency      String?
  dateOfBirth DateTime?
  isActive    Boolean   @default(false)

  // Visuals
  coverImageUrl   String?

  // Relations to dedicated data tables (replaces Json fields)
  stats       Stats?
  portfolio   PortfolioItem[] // A model has a portfolio of many items

  // Relations to paid features
  story         Story?
  featuredSlot  FeaturedSlot?
  subscription  Subscription?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Dedicated table for model statistics
model Stats {
  id      String @id @default(cuid())
  modelId String @unique
  model   Model  @relation(fields: [modelId], references: [id], onDelete: Cascade)

  height  String? // e.g., "5'11\""
  weight  String? // e.g., "125 lbs"
  bust    String? // e.g., "34B"
  waist   String? // e.g., "25\""
  hips    String? // e.g., "35\""
}

// Dedicated table for ALL portfolio items (images AND videos)
model PortfolioItem {
  id      String    @id @default(cuid())
  modelId String
  model   Model     @relation(fields: [modelId], references: [id], onDelete: Cascade)

  url     String    // URL to the image or video file
  type    MediaType // This is either IMAGE or VIDEO
  order   Int       // To control the display order in the portfolio
  altText String?   // Good for accessibility and SEO

  createdAt DateTime @default(now())
}

// Dedicated table for paid subscriptions
model Subscription {
  id                   String   @id @default(cuid())
  modelId              String   @unique
  model                Model    @relation(fields: [modelId], references: [id], onDelete: Cascade)

  stripeCustomerId     String   @unique
  stripeSubscriptionId String   @unique
  status               String
  currentPeriodEnd     DateTime
}

// Dedicated table for paid "Story" features
model Story {
  id        String    @id @default(cuid())
  modelId   String    @unique
  model     Model     @relation(fields: [modelId], references: [id], onDelete: Cascade)
  mediaUrl  String
  expiresAt DateTime
  createdAt DateTime  @default(now())
}

// Dedicated table for paid "Featured" slots
model FeaturedSlot {
  id        String   @id @default(cuid())
  modelId   String   @unique
  model     Model    @relation(fields: [modelId], references: [id], onDelete: Cascade)
  isActive  Boolean  @default(true)
  expiresAt DateTime
  createdAt DateTime @default(now())
}

//#####################################################
//  MODELS FOR NEXT-AUTH AUTHENTICATION
//#####################################################

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
